"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lineToCubic = exports.midPoint = exports.getPointAtSegLength = void 0;
function getPointAtSegLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
    var t1 = 1 - t;
    return {
        x: (Math.pow(t1, 3)) * p1x
            + t1 * t1 * 3 * t * c1x
            + t1 * 3 * t * t * c2x
            + (Math.pow(t, 3)) * p2x,
        y: (Math.pow(t1, 3)) * p1y
            + t1 * t1 * 3 * t * c1y
            + t1 * 3 * t * t * c2y
            + (Math.pow(t, 3)) * p2y,
    };
}
exports.getPointAtSegLength = getPointAtSegLength;
function midPoint(a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var bx = b[0];
    var by = b[1];
    return [ax + (bx - ax) * t, ay + (by - ay) * t];
}
exports.midPoint = midPoint;
function lineToCubic(x1, y1, x2, y2) {
    var t = 0.5;
    var p0 = [x1, y1];
    var p1 = [x2, y2];
    var p2 = midPoint(p0, p1, t);
    var p3 = midPoint(p1, p2, t);
    var p4 = midPoint(p2, p3, t);
    var p5 = midPoint(p3, p4, t);
    var p6 = midPoint(p4, p5, t);
    var cp1 = getPointAtSegLength.apply(0, p0.concat(p2, p4, p6, t));
    var cp2 = getPointAtSegLength.apply(0, p6.concat(p5, p3, p1, 0));
    return [cp1.x, cp1.y, cp2.x, cp2.y, x2, y2];
}
exports.lineToCubic = lineToCubic;
//# sourceMappingURL=line-2-cubic.js.map